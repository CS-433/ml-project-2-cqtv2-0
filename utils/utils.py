import numpy as np
import torch
import matplotlib.pyplot as plt
from skimage.transform import resize
from PIL import Image

def import_test(path='data/testing/test_set_images/'):
    """This function imports the test images from the path specified

    Args:
        path (str, optional): The path of the test images. Defaults to 'data/test_set_images/'.

    Returns:
        test_images: A numpy array of the test images.
    """
    test_images = []
    base_dir = 'test_'
    for i in range(1, 51):
        diri = base_dir + str(i)
        base_dir_i = path + diri + '/'
        img = np.array(Image.open(base_dir_i + diri + '.png')).astype('float32') / 255
        test_images.append(img)
    return np.array(test_images)

def show_images(tensor_x, tensor_y, nrow=2, ncol=4):
    """This function shows the images in tensor_x and tensor_y.

    Args:
        tensor_x (torch.tensor): The images we want to see.
        tensor_y (torch.tensor): The masks related to the images.
        nrow (int, optional): The number of rows of the figures. Defaults to 2.
        ncol (int, optional): the number of cols of the figures. Defaults to 4.
    """
    fig, axes = plt.subplots(nrow*2, ncol, figsize=(24, 24))
    tensor_x = np.transpose(tensor_x, (0, 2, 3, 1))
    tensor_y = tensor_y
    tensor_x = torch.clip(tensor_x, 0, 1)
    for i in range(nrow):
        for j in range(ncol):
            index = i * ncol + j
            img_x = tensor_x[index].cpu().numpy()
            img_y = tensor_y[index].cpu().numpy()
            axes[2*i, j].imshow(img_x, cmap='gray')
            axes[2*i, j].axis('off')
            
            axes[2*i + 1, j].imshow(img_y, cmap='gray')
            axes[2*i + 1, j].axis('off')
    
    plt.show()
def patch_extracting(input, size=584, resize=384):
    """This function extracts the patches from the input image to get a better prediction.

    Args:
        input (np.array): The input image.
        size (int, optional): The size of the input image. Defaults to 584.
        resize (int, optional): The size of the output image. Defaults to 384.

    Returns:
        output: The patches extracted from the input image.
    """
    input_patches = [None, None, None, None]
    input_patches[0] = np.transpose(input[0:resize, 0:resize, :], (2, 0, 1))
    input_patches[1] = np.transpose(input[0:resize, size-resize:size, :], (2, 0, 1))
    input_patches[2] = np.transpose(input[size-resize:size, 0:resize, :], (2, 0, 1))
    input_patches[3] = np.transpose(input[size-resize:size, size-resize:size, :], (2, 0, 1))
    
    return torch.tensor(input_patches).float()


def patch_assembling(output_patches):
    """This function assembles the patches into a single image.

    Args:
        output_patches (np.array): The patches to be assembled.ยง

    Returns:
        output: The assembled image.
    """
    x = 384
    y = 584
    eL = int(y / 2)
    output = np.empty(shape=(output_patches.shape[1], y, y))
    output[:, 0:eL, 0:eL] = output_patches[0, :, 0:eL, 0:eL]
    output[:, 0:eL, y-eL:y] = output_patches[1, :, 0:eL, x-eL:x]
    output[:, y-eL:y, 0:eL] = output_patches[2, :, x-eL:x, 0:eL]
    output[:, y-eL:y, y-eL:y] = output_patches[3, :, x-eL:x, x-eL:x]
    
    return output[0, :, :]

def mask_to_submission(output, index):
    """This function creates the submission from the output.
    

    Args:
        output (np.array): The output of the model.
        index (int): The index of the image.

    Returns:
        mask_submission: The digits generated by the imag of the model.
    """
    mask_submission = []
    for i in range(0, output.shape[0], 16):
        for j in range(0, output.shape[1], 16):
            prediction = 0
            patch = output[j:j+16, i:i+16]
            if np.mean(patch > 0.2) > 0.25:
                prediction = 1
            mask_submission.append(["{:03d}_{}_{}".format(index, i, j), prediction])
    return mask_submission


def submission_creating(model, path_testing='data/testing/test_set_images/'):
    submit_outputs = []
    x_test = import_test(path_testing)
    model.eval()

    for index in range(1, 51):
        xi = x_test[index - 1]
        xi = resize(xi, (resize, resize))
        #Our model is trained on 384x384 images, so we need to resize the input image to 384x384
        patch_extracted = patch_extracting(xi, size=584, resize=384)
        
        #We predict our patches
        output = np.array(model(patch_extracted)[0])
        
        # We reassemble the patches
        output = patch_assembling(output, resize, resize)
        output = resize(output, (608, 608))
        
        # We create the submission
        submit_output = mask_to_submission(output, index)
        submit_outputs.append(submit_output)

    submission = np.concatenate(submit_outputs, axis=0)
    submission = np.concatenate(([['id', 'prediction']], submission), axis=0)

    return submission
